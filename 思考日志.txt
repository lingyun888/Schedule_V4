2023_09_23:
今天在思考将TIME_TABLE分出来，来让整个schedule程序码不要长太胖。
2023_09_24:
在排flow的时候发现先把TIME_TABLE弄出来也没办法做到好，有考虑把TIME_TABLE放到最后再拿出来使用(demo阶段)
目前还是利用path_dic来整理flow为主，但目前还卡在排每个flow_中间path2的时间，这个动作要怎么写比较好，(想不出来要怎么写(schedule_middle的部分))
之前有写过但是那个是硬排的(依照flow的规格直接排)，没有先与其他flow比较相同path上的冲突问题，并利用篇一时间来达成排成问题，而是先硬排然后在比较冲突，但这样的话就缺少弹性排程这个效果了。
先跟老师说抱歉我真的想很久，删了又删，改了又删。有可能是我真的把问题想得太复杂，让整个结构的设计很不好(其实看上去是看得动的，但是可能这样的设计方式对后续排程操作是非常困难的)
18:53先发布一次，等等00:00我在想一下写法重新发布一次....


2023_09_25:
现在目前卡在schedule_middle这段程序码上面，用了四个for的巢状循环为了就是让有共同link的flow整理出来，并利用time_occupy_list来查看这link上有那些时间点已经被占据的，但这个方法有个缺失的地方，
就是他可以挑选出共同Link，但没办法记着前后link的关联性.......。还在想有甚么方法可以同时做到这几件事情.....。
建造出link_time_occupied_list及prev_links_occupired
想到的想法：
1.先排common_link的第一个Link，然后先寻找有这个link的flow(先依照Flow名称序优先挑选)
2.找到之后一开始先提取此link之前的path的时间点(并记录在prev_links_occupied)，这些时间点也都不能被拿来使用，同时也查看link_time_occupy_list里面有没有已占用的资源
3.比对之后挑选没有被占用的时间点排入，排完之后接着排下一个flow(从common_link中可得知)的相同link，直到排完所有flows相同link的为止
4.接着排common_link的下一个link项

决定先写个流程图：
1.先将每个flow的第一个link及最后一个link排好，此时会剩下中间的links没有排
2.排完之后比对一下有没有必然发生冲突的links(因为头尾固定，所以更改空间)，有冲突的link，(目前先这个方式)会依照flow名称，名称数字越小的先留下,其余排不下的flows移动到wait_to_schedule里面。(移动到wait_to_schedule这点后来再写的时候忘记了，之后要再补上这个条件)
3.最后可以得到每个flow头尾都有排好的时间表
4.排每个flow的中间部分：
    0.浏览每个flow取出common_links并保存起来
    1.先排common_link的第一个Link，然后先寻找有这个link的flow(先依照Flow名称序优先挑选)
    2.找到之后一开始先提取此link之前的path的时间点(并记录在prev_links_occupied)，这些时间点也都不能被拿来使用，同时也查看link_time_occupy_list里面有没有已占用的资源
    3.比对之后挑选没有被占用的时间点排入，排完之后接着排下一个flow(从common_link中可得知)的相同link，直到排完所有flows相同link的为止
    4.接着排common_link的下一个link项
    5.重复1.~4.直到排所有没有冲突的flows
5.中间排完之后，要将wait_for_flows与原本common_links内有冲突的flows做交换 

之前是先在同个flow上面依据第一格link的时间，依照flow的size、priod自动向后推算后走过随后link的占用时间点，但这样的话就没有弹性排程的效果(弹性排程效果就是，在排成的时候如果遇到相同link上同时间点上，同时有两格flow占用，则可以依据其他条件前后推移时间点，让以让这两个flow都有机会成功传输)，只能硬生生地把相同占用的flow选择性地放弃排程。


2023_09_27:
目前看似已经排好了，但我注意到后面的flow有些时间点比较奇怪一点，但由于储存的资料有点大量，从这些资料里面无法轻易找出不符合规律并得到解决方法，所以下个阶段可能会采取两个应对方式：
1.会先将这些资料构成图表，需要找一下哪种制图方式是最好的
2.将这些结果资料用纸笔过滤出来，找一下跟思路上有分歧的地方，再一一DEBUG。


2023_10_03
利用pyQt画图，今天处理了一下总务的东西，画图的部分还在思考要怎么设计比较好。

2023_10_04
先回顾一下礼拜一所说的(目标与解决)：
1.确认一个TSN系统是采用双向通讯的网络线(记事本与图片及论文)
2.封包可不可以拆开传输，一定要符合size传完吗，这个目前没有找到相关资料，但会制订size多少是因为会取每个传递的封包的最大公因子，来当作一个单位的资料量，所以才有size大小之分
3.需要将重叠的部分标示出来


2023_10_12:
回顾：
1.取消最后一条link先排的状况
2.让每个flow都不会有冲突为目标


2023_10_26:
前提：第一条link都不会有冲突

进度回顾vs整理：
1.有固定的deadline，意即何时开始都没差，要再给顶的时间前送完即可
2.有start_time、固定period & E2E，尽可能把最多的flows塞进时间表(目前做这个)
3.有start_time、固定period & E2E，可以延后开始传输时间(把start_time在整个周期结束后重设(尽早插入时间表(可能会很难)))

上次排的packet在时间上没有非常连贯的传输，这次有将他们传输时间排得比较紧密一点，目前要解决collision问题之后会再最佳化：
当资料传到一半时，有更优先的flow_data需要传输时，会先将她们传输，等传输完毕，再继续传输旧有(已传但未传完)的